using System;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UIElements;
using EditorAttributes;
using Patterns;
using KSH;

namespace SHG
{

  public class MainUIPlaceHolder : MonoBehaviour
  {
    [Flags]
    public enum WindowType
    {
      None = 0,
      Inventory = 1,
      ItemLocker = 2,
      Craft = 4,
      QuickSlot = 8
    }
    public static readonly WindowType[] ALL_WINDOW_TYPES = (WindowType[])Enum.GetValues(typeof(WindowType));

    int currentOpenedWindows = (int)WindowType.None;
    VisualElement root;
    InventoryContainerWindow inventoryWindow;
    QuickSlotWindow quickSlotWindow;
    CraftWindow craftWindow;
    ItemBox floatingItemBox;
    ItemLockerContainerWindow itemLockerWindow;
    VisualElement floatingDescriptionContainer;

    ItemSpawnTest itemSpawner;

    public WindowType[] GetCurrentOpenedWindowTypes()
    {
      var count = (Utils.CountBits(this.currentOpenedWindows));
      int index = 0;
      var windowTypes = new WindowType[count];
      foreach (var windowType in ALL_WINDOW_TYPES) {
        if (this.IsWindowOpened(windowType))  {
          windowTypes[index++] = windowType;
        }
      }
      return (windowTypes); 
    }

    public bool IsWindowOpened(WindowType windowType)
    {
      return ((this.currentOpenedWindows & ((int)windowType)) != 0);
    }

    public void CloseAllWindows()
    {
      foreach (var windowType in ALL_WINDOW_TYPES) {
        if (windowType != WindowType.QuickSlot && this.IsWindowOpened(windowType)) {
          this.SetWindowVisible(windowType, false);
        }
      }
    }

    public bool TryGetQuickSlotItem(int slotNumber, out EquipmentItemData item)
    {
      if (this.quickSlotWindow.IsVisiable) {

        return (this.quickSlotWindow.TryGetQuickslotItem(slotNumber, out item));
      }
      else {
        #if UNITY_EDITOR
        Debug.LogError("TryGetQuickslotItem: quick slot is not visible");
        #endif
        item = null;
        return (false);
      }
    }

    void Awake()
    {
      this.root = this.GetComponent<UIDocument>().rootVisualElement;
      this.root.style.width = Length.Percent(100);
      this.root.style.height = Length.Percent(100);
      this.CreateItemUI();
    }

    void OnEnable()
    {
      App.Instance?.UIController.SetMainUI(this); 
    }

    void OnDisable()
    {
      App.Instance?.UIController.SetMainUI(null); 
    }

    public void SetWindowVisible(WindowType windowType, bool visible)
    {
      IHideableUI window = windowType switch {
        WindowType.Inventory => this.inventoryWindow,
        WindowType.ItemLocker => this.itemLockerWindow,
        WindowType.Craft => this.craftWindow,
        WindowType.QuickSlot => this.quickSlotWindow,
        _ => throw (new ArgumentException())
      };
      this.SetWindowVisible(window, windowType, visible);
    }

    public void ToggleWindowVisible(WindowType windowType)
    {
      this.SetWindowVisible(
        windowType, 
        this.IsWindowOpened(windowType) ? false: true);
    }

    void SetWindowVisible(IHideableUI window, bool visible)
    {
      WindowType windowType = window switch {
        InventoryContainerWindow inventory => WindowType.Inventory,
        ItemLockerContainerWindow itemLocker => WindowType.ItemLocker,
        CraftWindow craftWindow => WindowType.Craft,
        QuickSlotWindow quickSlotWindow => WindowType.QuickSlot,
        _ => throw (new NotImplementedException($"unknown window type for {window}"))
      };
      this.SetWindowVisible(window, windowType, visible);
    }

    void SetWindowVisible(IHideableUI window, WindowType windowType, bool visible)
    {

      if (windowType == WindowType.Craft) {
        this.SetInventoryWindowPosition(
          visible ? 60f: 40f
          );
      }

      if (visible && !window.IsVisiable) {
        window.Show();
        this.currentOpenedWindows |= ((int)windowType);
      }
      else if (!visible && window.IsVisiable) {
        window.Hide();
        this.currentOpenedWindows &= (~((int)windowType));
      }
    }

    void SetInventoryWindowPosition(float left)
    {
      this.inventoryWindow.style.left = Length.Percent(left);
    }

    void CreateItemUI()
    {
      this.floatingItemBox = this.CreateFloatingItemBox();
      this.floatingDescriptionContainer = this.CreateFloatingDescription();
      this.inventoryWindow = new InventoryContainerWindow(
        this.floatingItemBox,
        this.floatingDescriptionContainer);
      this.quickSlotWindow = new QuickSlotWindow(this.floatingItemBox);
      this.craftWindow = new CraftWindow(this.floatingItemBox);
      this.itemLockerWindow = new ItemLockerContainerWindow(this.floatingItemBox);
      this.inventoryWindow.Hide();
      this.craftWindow.Hide();
      this.itemLockerWindow.Hide();
      this.root.Add(this.itemLockerWindow);
      this.root.Add(this.inventoryWindow);
      this.root.Add(this.quickSlotWindow);
      this.root.Add(this.craftWindow);
      this.root.Add(this.floatingItemBox);
      this.root.Add(floatingDescriptionContainer);
      this.WireInventoryStoarges();
    }

    void WireInventoryStoarges()
    {
      this.inventoryWindow.AddDropTargets(
        new ItemStorageWindow[] { 
        this.quickSlotWindow,
        this.itemLockerWindow.ItemContainer
        }
        );
      this.itemLockerWindow.ItemContainer.AddDropTargets(
        new ItemStorageWindow[] {
          this.inventoryWindow.NormalItemTab.Content as InventoryWindow,
          this.inventoryWindow.StoryItemTab.Content as InventoryWindow
        }
        );
      this.quickSlotWindow.AddDropTargets(
        new ItemStorageWindow[] { 
        this.inventoryWindow.NormalItemTab.Content as InventoryWindow,
        this.inventoryWindow.StoryItemTab.Content as InventoryWindow
        }
        );
    }

    void Start()
    {

    }

    ItemBox CreateFloatingItemBox()
    {
      var floatingItemBox = new ItemBox(this.root);
      floatingItemBox.AddToClassList("item-box-floating");
      floatingItemBox.Hide();
      return (floatingItemBox);
    }

    VisualElement CreateFloatingDescription()
    {
      var floatingDescriptionContainer = new VisualElement();
      floatingDescriptionContainer.AddToClassList("item-storage-item-description-container");
      var itemDescriptionTitle = new Label();
      itemDescriptionTitle.AddToClassList("window-label");
      itemDescriptionTitle.AddToClassList("item-storage-item-description-title");
      var itemDescriptionContent = new Label();
      itemDescriptionContent.AddToClassList("item-storage-item-description-content");
      floatingDescriptionContainer.Add(itemDescriptionTitle);
      floatingDescriptionContainer.Add(itemDescriptionContent);
      Utils.HideVisualElement(floatingDescriptionContainer);
      return (floatingDescriptionContainer);
    }

    [Button ("Show inventory")]
    void ShowInventory()
    {
      this.inventoryWindow.Show();   
    }
    
    [Button ("Hide inventory")]
    void HideInventory()
    {
      this.inventoryWindow.Hide();
    }
  }
}
